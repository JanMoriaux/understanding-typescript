class Person {
  name: string;
  private type: string;
  protected age: number = 27;

  //shortcut for creating and initializing the public userName property
  constructor(name: string, public userName: string) {
    this.name = name;
  }

  printAge() {
    console.log(this.age);
    this.setType("Old guy");
  }

  private setType(type: string) {
    this.type = type;
    console.log(this.type);
  }
}

const person = new Person("Max", "max");
console.log(person);
person.printAge();
//person.setType("Cool guy"); Won't work with private method

//Inheritance
console.log("INHERITANCE");

class Max extends Person {
  //name = "Max";

  constructor(userName: string) {
    super("Max", userName);
    this.age = 31;
  }
}
const max = new Max("max");
console.log(max);

//Getters & Setters
console.log("Getters and Setters");
class Plant {
  private _species: string = "Default";

  get species(): string {
    return this._species;
  }

  set species(value: string) {
    if (value.length > 3) {
      this._species = value;
    } else {
      this._species = "Default";
    }
  }
}

let plant = new Plant();
console.log(plant.species);
plant.species = "AB";
console.log(plant.species);
plant.species = "Green Plant";
console.log(plant.species);

//Static Properties & Methods
console.log("Static Properties & Methods");
class Helpers {
  static PI: number = 3.14;
  static calcCirumference(diameter) {
    return this.PI * diameter;
  }
}
console.log(2 * Helpers.PI);
console.log(Helpers.calcCirumference(8));

//Abstract Classes
console.log("Abstract Classes");
abstract class Project {
  projectName: string = "Default";
  budget: number = 1000;

  calcBudget() {
    return this.budget * 2;
  }

  abstract changeName(name: string): void;
}

class ITProject extends Project {
  changeName(name: string): void {
    this.projectName = name;
  }
}

let newProject = new ITProject();
console.log(newProject);
newProject.changeName("Super IT Project");
console.log(newProject);

//Private constructors
console.log("Private constructors");

class OnlyOne {
  private static instance: OnlyOne;

  private constructor(public readonly name: string) {}

  public static getInstance() {
    if (!OnlyOne.instance) {
      OnlyOne.instance = new OnlyOne("The Only One");
    }
    return OnlyOne.instance;
  }
}

// let wrong = new OnlyOne("The Only One");
let right = OnlyOne.getInstance();
console.log(right.name);

//readonly properties
console.log("Readonly properties");
// right.name = "Something else";
